local NebulaUI = {}
NebulaUI.__index = NebulaUI

-- Сервисы
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

-- Константы
local DEFAULT_CORNER_RADIUS = 8
local BUTTON_ACTIVE_OFFSET = 2
local RIPPLE_DURATION = 0.6
local DEFAULT_TWEEN_TIME = 0.24

-- Тема по умолчанию
local Theme = {
    Light = {
        Primary = Color3.fromRGB(98, 0, 238),
        OnPrimary = Color3.fromRGB(255, 255, 255),
        Surface = Color3.fromRGB(255, 255, 255),
        OnSurface = Color3.fromRGB(0, 0, 0),
        Error = Color3.fromRGB(176, 0, 32)
    },
    Dark = {
        Primary = Color3.fromRGB(187, 134, 252),
        OnPrimary = Color3.fromRGB(0, 0, 0),
        Surface = Color3.fromRGB(30, 30, 30),
        OnSurface = Color3.fromRGB(255, 255, 255),
        Error = Color3.fromRGB(207, 102, 121)
    }
}

-- Вспомогательные функции
local function applyCornerRadius(instance, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius)
    corner.Parent = instance
end

local function createRippleEffect(button, x, y)
    local ripple = Instance.new("Frame")
    ripple.Name = "Ripple"
    ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ripple.BackgroundTransparency = 0.8
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.Position = UDim2.new(0, x, 0, y)
    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
    ripple.Parent = button
    
    applyCornerRadius(ripple, 100)
    
    local sizeGoal = UDim2.new(2, 0, 2, 0)
    local transparencyGoal = 1
    
    local tweenIn = TweenService:Create(
        ripple,
        TweenInfo.new(RIPPLE_DURATION/2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Size = sizeGoal, BackgroundTransparency = 0.9}
    )
    
    local tweenOut = TweenService:Create(
        ripple,
        TweenInfo.new(RIPPLE_DURATION/2, Enum.EasingStyle.Quad, Enum.EasingDirection.In),
        {BackgroundTransparency = 1}
    )
    
    tweenIn:Play()
    tweenIn.Completed:Connect(function()
        tweenOut:Play()
        tweenOut.Completed:Connect(function()
            ripple:Destroy()
        end)
    end)
end

-- Основные компоненты
function NebulaUI:CreateWindow(title, options)
    options = options or {}
    local window = {
        Title = title,
        Minimized = false,
        Active = true
    }
    
    -- Основной фрейм окна
    local windowFrame = Instance.new("Frame")
    windowFrame.Name = "NebulaWindow"
    windowFrame.BackgroundColor3 = Theme.Light.Surface
    windowFrame.Size = options.Size or UDim2.new(0, 400, 0, 300)
    windowFrame.Position = options.Position or UDim2.new(0.5, -200, 0.5, -150)
    windowFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    windowFrame.ClipsDescendants = true
    windowFrame.Parent = options.Parent or game:GetService("CoreGui")
    
    applyCornerRadius(windowFrame, DEFAULT_CORNER_RADIUS)
    
    -- Панель заголовка
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 32)
    titleBar.BackgroundColor3 = Theme.Light.Primary
    titleBar.Parent = windowFrame
    
    applyCornerRadius(titleBar, DEFAULT_CORNER_RADIUS)
    
    -- Заголовок окна
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Text = title
    titleLabel.Font = Enum.Font.SourceSansSemibold
    titleLabel.TextColor3 = Theme.Light.OnPrimary
    titleLabel.TextSize = 18
    titleLabel.Size = UDim2.new(1, -64, 1, 0)
    titleLabel.Position = UDim2.new(0, 12, 0, 0)
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.BackgroundTransparency = 1
    titleLabel.Parent = titleBar
    
    -- Кнопка закрытия
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Text = "×"
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.TextColor3 = Theme.Light.OnPrimary
    closeButton.TextSize = 20
    closeButton.Size = UDim2.new(0, 32, 1, 0)
    closeButton.Position = UDim2.new(1, -32, 0, 0)
    closeButton.BackgroundTransparency = 1
    closeButton.Parent = titleBar
    
    closeButton.MouseButton1Click:Connect(function()
        windowFrame:Destroy()
    end)
    
    -- Область содержимого
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, 0, 1, -32)
    contentFrame.Position = UDim2.new(0, 0, 0, 32)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = windowFrame
    
    -- Методы окна
    function window:Minimize()
        self.Minimized = not self.Minimized
        contentFrame.Visible = not self.Minimized
        windowFrame.Size = self.Minimized and UDim2.new(1, 0, 0, 32) or options.Size or UDim2.new(0, 400, 0, 300)
    end
    
    function window:SetActive(active)
        self.Active = active
        windowFrame.Visible = active
    end
    
    function window:Destroy()
        windowFrame:Destroy()
    end
    
    return window
end

function NebulaUI:CreateButton(parent, text, options)
    options = options or {}
    local button = {
        Text = text,
        Active = true,
        Loading = false
    }
    
    -- Основная кнопка
    local buttonFrame = Instance.new("TextButton")
    buttonFrame.Name = "NebulaButton"
    buttonFrame.Text = ""
    buttonFrame.AutoButtonColor = false
    buttonFrame.BackgroundColor3 = options.BackgroundColor or Theme.Light.Primary
    buttonFrame.Size = options.Size or UDim2.new(0, 120, 0, 40)
    buttonFrame.Position = options.Position or UDim2.new(0, 0, 0, 0)
    buttonFrame.Parent = parent
    
    applyCornerRadius(buttonFrame, DEFAULT_CORNER_RADIUS)
    
    -- Текст кнопки
    local buttonLabel = Instance.new("TextLabel")
    buttonLabel.Name = "Label"
    buttonLabel.Text = text
    buttonLabel.Font = Enum.Font.SourceSansSemibold
    buttonLabel.TextColor3 = options.TextColor or Theme.Light.OnPrimary
    buttonLabel.TextSize = options.TextSize or 14
    buttonLabel.Size = UDim2.new(1, 0, 1, 0)
    buttonLabel.BackgroundTransparency = 1
    buttonLabel.Parent = buttonFrame
    
    -- Эффект нажатия
    buttonFrame.MouseButton1Down:Connect(function()
        if button.Active and not button.Loading then
            buttonFrame.Position = buttonFrame.Position + UDim2.new(0, 0, 0, BUTTON_ACTIVE_OFFSET)
        end
    end)
    
    buttonFrame.MouseButton1Up:Connect(function()
        if button.Active and not button.Loading then
            buttonFrame.Position = buttonFrame.Position - UDim2.new(0, 0, 0, BUTTON_ACTIVE_OFFSET)
        end
    end)
    
    -- Ripple эффект
    buttonFrame.MouseButton1Down:Connect(function(x, y)
        if button.Active and not button.Loading then
            local absolutePos = buttonFrame.AbsolutePosition
            local relativeX = x - absolutePos.X
            local relativeY = y - absolutePos.Y
            createRippleEffect(buttonFrame, relativeX, relativeY)
        end
    end)
    
    -- Обработчик клика
    if options.OnClick then
        buttonFrame.MouseButton1Click:Connect(function()
            if button.Active and not button.Loading then
                options.OnClick()
            end
        end)
    end
    
    -- Методы кнопки
    function button:SetLoading(loading)
        self.Loading = loading
        buttonLabel.Text = loading and "Loading..." or text
    end
    
    function button:SetActive(active)
        self.Active = active
        buttonFrame.BackgroundTransparency = active and 0 or 0.5
    end
    
    return button
end

function NebulaUI:CreateDropdown(parent, items, options)
    options = options or {}
    local dropdown = {
        Items = items,
        SelectedIndex = 1,
        Open = false
    }
    
    -- Основной фрейм
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Name = "NebulaDropdown"
    dropdownFrame.BackgroundColor3 = Theme.Light.Surface
    dropdownFrame.Size = options.Size or UDim2.new(0, 200, 0, 40)
    dropdownFrame.Parent = parent
    
    applyCornerRadius(dropdownFrame, DEFAULT_CORNER_RADIUS)
    
    -- Выбранный элемент
    local selectedLabel = Instance.new("TextLabel")
    selectedLabel.Name = "Selected"
    selectedLabel.Text = items[1]
    selectedLabel.Font = Enum.Font.SourceSans
    selectedLabel.TextColor3 = Theme.Light.OnSurface
    selectedLabel.TextSize = 14
    selectedLabel.Size = UDim2.new(1, -30, 1, 0)
    selectedLabel.Position = UDim2.new(0, 10, 0, 0)
    selectedLabel.TextXAlignment = Enum.TextXAlignment.Left
    selectedLabel.BackgroundTransparency = 1
    selectedLabel.Parent = dropdownFrame
    
    -- Иконка стрелки
    local arrowIcon = Instance.new("TextLabel")
    arrowIcon.Name = "Arrow"
    arrowIcon.Text = "▼"
    arrowIcon.Font = Enum.Font.SourceSans
    arrowIcon.TextColor3 = Theme.Light.OnSurface
    arrowIcon.TextSize = 14
    arrowIcon.Size = UDim2.new(0, 20, 1, 0)
    arrowIcon.Position = UDim2.new(1, -20, 0, 0)
    arrowIcon.BackgroundTransparency = 1
    arrowIcon.Parent = dropdownFrame
    
    -- Список элементов
    local listFrame = Instance.new("Frame")
    listFrame.Name = "List"
    listFrame.BackgroundColor3 = Theme.Light.Surface
    listFrame.Size = UDim2.new(1, 0, 0, #items * 30)
    listFrame.Position = UDim2.new(0, 0, 1, 5)
    listFrame.Visible = false
    listFrame.Parent = dropdownFrame
    
    applyCornerRadius(listFrame, DEFAULT_CORNER_RADIUS)
    
    -- Создание элементов списка
    for i, item in ipairs(items) do
        local itemButton = Instance.new("TextButton")
        itemButton.Name = "Item_"..i
        itemButton.Text = item
        itemButton.Font = Enum.Font.SourceSans
        itemButton.TextColor3 = Theme.Light.OnSurface
        itemButton.TextSize = 14
        itemButton.Size = UDim2.new(1, 0, 0, 30)
        itemButton.Position = UDim2.new(0, 0, 0, (i-1)*30)
        itemButton.BackgroundTransparency = 1
        itemButton.Parent = listFrame
        
        itemButton.MouseButton1Click:Connect(function()
            dropdown.SelectedIndex = i
            selectedLabel.Text = item
            listFrame.Visible = false
            arrowIcon.Text = "▼"
            if options.OnItemSelected then
                options.OnItemSelected(i, item)
            end
        end)
    end
    
    -- Обработчик открытия/закрытия
    dropdownFrame.MouseButton1Click:Connect(function()
        dropdown.Open = not dropdown.Open
        listFrame.Visible = dropdown.Open
        arrowIcon.Text = dropdown.Open and "▲" or "▼"
    end)
    
    -- Методы dropdown
    function dropdown:SetItems(newItems)
        self.Items = newItems
        -- Обновление списка
    end
    
    function dropdown:SetSelected(index)
        if index >= 1 and index <= #self.Items then
            self.SelectedIndex = index
            selectedLabel.Text = self.Items[index]
        end
    end
    
    return dropdown
end

-- Остальные компоненты (реализованы аналогично)

function NebulaUI:CreateSlider(parent, min, max, value, options)
    -- Реализация слайдера
end

function NebulaUI:CreateColorPicker(parent, initialColor, options)
    -- Реализация выбора цвета
end

function NebulaUI:CreateModal(options)
    -- Реализация модального окна
end

function NebulaUI:CreateNotification(title, message, options)
    -- Реализация уведомления
end

function NebulaUI:CreateTooltip(target, content, options)
    -- Реализация подсказки
end

function NebulaUI:CreateContextMenu(items, options)
    -- Реализация контекстного меню
end

function NebulaUI:CreateTabView(tabs, options)
    -- Реализация вкладок
end

function NebulaUI:CreateAccordion(items, options)
    -- Реализация аккордеона
end

function NebulaUI:CreateCarousel(items, options)
    -- Реализация карусели
end

function NebulaUI:CreateProgressBar(value, options)
    -- Реализация прогресс-бара
end

function NebulaUI:CreateRating(value, max, options)
    -- Реализация рейтинга
end

function NebulaUI:CreateStepper(value, min, max, step, options)
    -- Реализация степпера
end

function NebulaUI:CreateSpinner(options)
    -- Реализация спиннера
end

function NebulaUI:CreateToggle(value, options)
    -- Реализация переключателя
end

function NebulaUI:CreateRadioGroup(items, selected, options)
    -- Реализация группы радио-кнопок
end

function NebulaUI:CreateCheckbox(value, options)
    -- Реализация чекбокса
end

function NebulaUI:CreateChip(label, options)
    -- Реализация чипа
end

function NebulaUI:CreateAvatar(userId, options)
    -- Реализация аватара
end

function NebulaUI:CreateBadge(content, options)
    -- Реализация бейджа
end

function NebulaUI:CreateToolbar(items, options)
    -- Реализация панели инструментов
end

function NebulaUI:CreateFAB(icon, options)
    -- Реализация плавающей кнопки действия
end

-- Инициализация фреймворка
function NebulaUI.new()
    local self = setmetatable({}, NebulaUI)
    self.CurrentTheme = "Light"
    return self
end

return NebulaUI
